@{
    ViewData["Title"] = "View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using PerpetuumSoft.Knockout
@model List<PropertyEditor.Models.Property>
           
@{
    var ko = Html.CreateKnockoutContext();
}
<!-- Page starts here -->

<table>
    <thead>
        <tr>
            <th>Property</th>
            <th>Value</th>
            <th>
                <div class="button add-button" title="Add"></div>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (PropertyEditor.Models.Property property in Model)
        {
            <tr class="editable">
                <td class="property-name">@property.Name</td>
                <td>
                    @{
                        var valueStringified = (property.Type == (int)PropertyEditor.Models.property_type.string_type ? "\"" + property.Value + "\"" : property.Value);
                    }
                    <div class="value-field">@valueStringified</div>
                </td>
                        <!--<td>
                            <form method="get" action="/PropertyEditor/EditPanel">
                                <input name="Name" type="hidden" value="@@item.Name" />
                                <button type="submit">Edit</button>
                            </form>
                        </td>-->
                <td>
                    <div class="button delete-button" title="Delete"></div>
                </td>
            </tr>
        }
    </tbody>
</table> <br />

<!--<button value="Add">
    <div id="add-button" class="button" title="Add property"></div>
    @@Html.ActionLink("Add", "AddPanel", "PropertyEditor")
</button>-->

<div id="message-box"></div>

<script type="text/javascript">
    $(document).ready(function () {

        var errorMessages4Status = {
            add_success: "Property successfully added",
            add_error: "Wrong property name",
            edit_success: "Property successfully edited",
            edit_error: "Error during property edit",
            delete_success: "Property successfully deleted",
            ready: ""
        };

        // --------------------------------------------------------+
        // Статус текущего действия.
        function showStatus(status) {
            $("#message-box")
                .empty()
                .append(errorMessages4Status[status])
                .fadeIn("fast")
                .fadeOut(4000);
        }

        // --------------------------------------------------------+
        // Удаление параметра.
        $(".delete-button").click(function () {
            var row = $(this).parent().parent();
            var propertyName = row.find('.property-name').text();


            // Удаляем DOM элемент
            row.remove();

            // Посылаем запрос на удаление объекта из базы данных.
            $.post('/PropertyEditor/Delete',
                { Name: propertyName },
                function (status) {
                    showStatus(status);
                });
        });

        // --------------------------------------------------------+
        // Добавление.
        $(".add-button").click(function () {
            window.open("/PropertyEditor/AddPanel", "_self");
        });

        // --------------------------------------------------------+
        // Изменение.
        $(".editable").click(function () {
            var row = $(this);
            var propertyName = row.find('.property-name').text();

            window.open("/PropertyEditor/EditPanel?Name=" + propertyName, "_self");
        });

        /*// --------------------------------------------------------+
        // Прячем поля ввода.
        $(".editable input").hide();
        $(".editable").click(function () {
        $(this).find('input').show();
        $(this).find('.value-field').hide();
        });

        // Сохранение измененных данных.
        function save_editable() {
        var row = $(this);
        var propertyName = row.find('.property-name').text();

        $.post('/PropertyEditor/Edit',
        { Name: propertyName,  },
        function (status) {
        showStatus(status);
        });
        }
        $(".editable input").focusout(save_editable.bind(this));
        $(".editable input").keydown(function (event) {
        if (event.which == 13) {
        (save_editable.bind(this))();
        }
        } .bind(this));*/

        // --------------------------------------------+
        // Форма добавления параметров.
        $("#AddForm").validate({
            focusInvalid: false,
            focusCleanup: true,
            rules: {
                Name: {
                    required: true,
                    minlength: 2,
                    maxlength: 17
                },
                Value: {
                    required: true,
                    minlength: 2,
                    maxlength: 17
                }
            },
            messages: {
                Name: {
                    required: "Укажите название параметра!",
                    minlength: "Не менее 2 символов",
                    maxlength: "Не более 17 символов"
                },
                Value: {
                    required: "Укажите значение параметра!",
                    minlength: "Не менее 2 символов",
                    maxlength: "Не более 17 символов"
                }
            }
        });

        $("#AddFormSumbitButton").click(function () {
            var Name = $("#Name").value(),
                            Type = $("#Type").value(),
                            Value = $("#Value").value();
            // Посылаем запрос на создание объекта в базе данных.
            $.post('/PropertyEditor/Add',
                            {
                                Name: Name,
                                Type: Type,
                                Value: Value
                            },
                            function (status) {
                                showStatus(status);
                            });
        });
    });
</script>

@ko.Apply(Model)